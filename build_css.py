#!/usr/bin/env python3
"""
CSS Build System - T√°ch v√† g·ªôp CSS t·ª± ƒë·ªông cho Flask Project
Author: BRICON Web Development Team
Usage: python build_css.py [command]
pip install watchdog
"""

import os
import re
from pathlib import Path
from datetime import datetime

# ==================== C·∫§U H√åNH D·ª∞ √ÅN ====================
BASE_DIR = Path(__file__).parent.resolve()
STATIC_DIR = BASE_DIR / 'app' / 'static'
CSS_DIR = STATIC_DIR / 'css'
MODULES_DIR = CSS_DIR / 'modules'
INPUT_FILE = CSS_DIR / 'style.css'
OUTPUT_FILE = CSS_DIR / 'main.min.css'

# ==================== C·∫§U TR√öC MODULE CSS ====================
CSS_MODULES = {
    '01-reset.css': {
        'start': '/* ==================== GLOBAL RESET ==================== */',
        'end': '/* ==================== NAVBAR ENHANCEMENTS ==================== */',
        'description': 'CSS Reset & Global Styles'
    },
    '02-navbar.css': {
        'start': '/* ==================== NAVBAR ENHANCEMENTS ==================== */',
        'end': '/* ==================== TOP BAR ==================== */',
        'description': 'Navigation Bar Styles'
    },
    '03-topbar.css': {
        'start': '/* ==================== TOP BAR ==================== */',
        'end': '/* ==================== BANNER  ==================== */',
        'description': 'Top Bar Styles'
    },
    '04-banner.css': {
        'start': '/* ==================== BANNER  ==================== */',
        'end': '/* ==================== PRODUCT CARD ==================== */',
        'description': 'Banner Carousel Styles'
    },
    '05-product-card.css': {
        'start': '/* ==================== PRODUCT CARD ==================== */',
        'end': '/* ==================== BLOG CARD ==================== */',
        'description': 'Product Card Component'
    },
    '06-blog-card.css': {
        'start': '/* ==================== BLOG CARD ==================== */',
        'end': '/* ==================== SECTION TITLE ==================== */',
        'description': 'Blog Card Component'
    },
    '07-section-title.css': {
        'start': '/* ==================== SECTION TITLE ==================== */',
        'end': '/* ==================== FILTER SIDEBAR ==================== */',
        'description': 'Section Title Styles'
    },
    '08-filter-sidebar.css': {
        'start': '/* ==================== FILTER SIDEBAR ==================== */',
        'end': '/* ==================== FLOATING ACTION BUTTONS ==================== */',
        'description': 'Filter Sidebar Component'
    },
    '09-floating-buttons.css': {
        'start': '/* ==================== FLOATING ACTION BUTTONS ==================== */',
        'end': '/* ==================== PAGE HEADER ==================== */',
        'description': 'Floating Action Buttons'
    },
    '10-page-header.css': {
        'start': '/* ==================== PAGE HEADER ==================== */',
        'end': '/* ==================== PAGINATION ==================== */',
        'description': 'Page Header Styles'
    },
    '11-pagination.css': {
        'start': '/* ==================== PAGINATION ==================== */',
        'end': '/* ==================== FOOTER ==================== */',
        'description': 'Pagination Component'
    },
    '12-footer.css': {
        'start': '/* ==================== FOOTER ==================== */',
        'end': '/* ==================== UTILITY ANIMATIONS ==================== */',
        'description': 'Footer Styles'
    },
    '13-animations.css': {
        'start': '/* ==================== UTILITY ANIMATIONS ==================== */',
        'end': '/* ==================== BUTTONS ENHANCEMENT ==================== */',
        'description': 'CSS Animations'
    },
    '14-buttons.css': {
        'start': '/* ==================== BUTTONS ENHANCEMENT ==================== */',
        'end': '/* ==================== CUSTOM SCROLLBAR',
        'description': 'Button Styles'
    },
    '15-scrollbar.css': {
        'start': '/* ==================== CUSTOM SCROLLBAR',
        'end': '/* ==================== ALERT MESSAGES ==================== */',
        'description': 'Custom Scrollbar'
    },
    '16-alerts.css': {
        'start': '/* ==================== ALERT MESSAGES ==================== */',
        'end': '/* ==================== LOADING STATES ==================== */',
        'description': 'Alert Messages'
    },
    '17-loading.css': {
        'start': '/* ==================== LOADING STATES ==================== */',
        'end': '/* ==================== GI·ªöI THI·ªÜU PAGE ==================== */',
        'description': 'Loading States'
    },
    '18-about-page.css': {
        'start': '/* ==================== GI·ªöI THI·ªÜU PAGE ==================== */',
        'end': '/* ==================== FEATURED PROJECTS CAROUSEL ==================== */',
        'description': 'About Page Styles'
    },
    '19-featured-projects.css': {
        'start': '/* ==================== FEATURED PROJECTS CAROUSEL ==================== */',
        'end': '/* ==================== SCROLL TO TOP BUTTON WITH PROGRESS ==================== */',
        'description': 'Featured Projects Carousel'
    },
    '20-scroll-to-top.css': {
        'start': '/* ==================== SCROLL TO TOP BUTTON WITH PROGRESS ==================== */',
        'end': '/* ==================== FORCE GRAY SCROLLBAR - OVERRIDE ALL ==================== */',
        'description': 'Scroll to Top Button'
    },
    '21-scrollbar-override.css': {
        'start': '/* ==================== FORCE GRAY SCROLLBAR - OVERRIDE ALL ==================== */',
        'end': '/* ==================== RETURN & REFUND POLICY STYLES ==================== */',
        'description': 'Scrollbar Override'
    },
    '22-policy-page.css': {
        'start': '/* ==================== RETURN & REFUND POLICY STYLES ==================== */',
        'end': '/* ==================== FORCE ROUND DOTS - MUST BE AT END OF FILE ==================== */',
        'description': 'Policy Page Styles'
    },
    '23-carousel-dots.css': {
        'start': '/* ==================== FORCE ROUND DOTS - MUST BE AT END OF FILE ==================== */',
        'end': '/* ==================== BREADCRUMB STYLES ==================== */',
        'description': 'Carousel Dots Override'
    },
    '24-breadcrumb.css': {
        'start': '/* ==================== BREADCRUMB STYLES ==================== */',
        'end': ' /* Skip Link */',
        'description': 'Breadcrumb Navigation'
    },
    '25-accessibility.css': {
        'start': ' /* Skip Link */',
        'end': '/* ============ CHATBOT WIDGET',
        'description': 'Accessibility Features'
    },
    '26-chatbot.css': {
        'start': '/* ============ CHATBOT WIDGET',
        'end': '/* ==================== PROJECT FILTER BUTTONS',
        'description': 'Chatbot Widget'
    },
    '27-project-filters.css': {
        'start': '/* ==================== PROJECT FILTER BUTTONS',
        'end': '/* ==================== ABOUT COMPANY SECTION',
        'description': 'Project Filter Buttons'
    },
    '28-about-company-section.css': {
        'start': '/* ==================== ABOUT COMPANY SECTION',
        'end': None,
        'description': 'CSS c·ªßa about ·ªü trang index'
    }
}


def print_header(title):
    """In header ƒë·∫πp"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70 + "\n")


def print_success(message):
    """In th√¥ng b√°o th√†nh c√¥ng"""
    print(f"‚úÖ {message}")


def print_error(message):
    """In th√¥ng b√°o l·ªói"""
    print(f"‚ùå {message}")


def print_info(message):
    """In th√¥ng b√°o th√¥ng tin"""
    print(f"‚ÑπÔ∏è  {message}")


def print_warning(message):
    """In th√¥ng b√°o c·∫£nh b√°o"""
    print(f"‚ö†Ô∏è  {message}")


def extract_css_section(content, start_marker, end_marker):
    """Tr√≠ch xu·∫•t section CSS gi·ªØa 2 marker"""
    if not start_marker:
        return ""

    start_idx = content.find(start_marker)
    if start_idx == -1:
        return ""

    if end_marker:
        end_idx = content.find(end_marker, start_idx)
        if end_idx == -1:
            return content[start_idx:]
        return content[start_idx:end_idx]

    return content[start_idx:]


def minify_css(css_content):
    """Minify CSS - lo·∫°i b·ªè comments v√† kho·∫£ng tr·∫Øng th·ª´a"""
    # Gi·ªØ l·∫°i comment ƒë·∫ßu ti√™n (header info)
    first_comment = re.search(r'/\*.*?\*/', css_content, flags=re.DOTALL)
    header = first_comment.group(0) if first_comment else ""

    # Lo·∫°i b·ªè t·∫•t c·∫£ comments
    css_content = re.sub(r'/\*.*?\*/', '', css_content, flags=re.DOTALL)

    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    css_content = re.sub(r'\s+', ' ', css_content)
    css_content = re.sub(r'\s*([{}:;,>+~])\s*', r'\1', css_content)
    css_content = re.sub(r';\s*}', '}', css_content)

    # Lo·∫°i b·ªè d√≤ng tr·ªëng
    css_content = re.sub(r'\n\s*\n', '\n', css_content)

    return (header + "\n" + css_content.strip()) if header else css_content.strip()


def split_css(input_file):
    """T√°ch file CSS l·ªõn th√†nh c√°c module nh·ªè"""
    print_header("üé® T√ÅCH FILE CSS TH√ÄNH C√ÅC MODULE")

    if not input_file.exists():
        print_error(f"Kh√¥ng t√¨m th·∫•y file: {input_file}")
        return False

    print_info(f"ƒê·ªçc file: {input_file}")

    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # T·∫°o th∆∞ m·ª•c modules
    MODULES_DIR.mkdir(parents=True, exist_ok=True)
    print_success(f"T·∫°o th∆∞ m·ª•c: {MODULES_DIR}")

    print(f"\nüì¶ ƒêang t√°ch th√†nh {len(CSS_MODULES)} module...\n")

    total_lines = 0
    total_size = 0

    for filename, config in CSS_MODULES.items():
        section = extract_css_section(content, config['start'], config['end'])

        if section:
            output_path = MODULES_DIR / filename

            # Th√™m header cho m·ªói module
            header = f"""/* ==================== {config['description'].upper()} ====================
 * File: {filename}
 * Auto-generated from style.css
 * Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
 * ========================================================================== */

"""

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(header + section)

            lines = len(section.split('\n'))
            size = len(section) / 1024
            total_lines += lines
            total_size += size

            print(f"  {filename:32s} | {lines:5d} d√≤ng | {size:7.1f} KB | {config['description']}")
        else:
            print_warning(f"{filename:32s} | Kh√¥ng t√¨m th·∫•y n·ªôi dung")

    print(f"\n{'‚îÄ' * 70}")
    print(f"  T·ªïng c·ªông: {len(CSS_MODULES)} files | {total_lines:5d} d√≤ng | {total_size:7.1f} KB")
    print(f"{'‚îÄ' * 70}")

    print_success(f"Ho√†n t·∫•t! Module ƒë∆∞·ª£c l∆∞u t·∫°i: {MODULES_DIR}")
    return True


def build_css():
    """G·ªôp t·∫•t c·∫£ module th√†nh main.min.css"""
    print_header("üî® BUILD MAIN.MIN.CSS")

    if not MODULES_DIR.exists():
        print_error(f"Th∆∞ m·ª•c {MODULES_DIR} kh√¥ng t·ªìn t·∫°i!")
        print_info("Ch·∫°y: python build_css.py split")
        return False

    combined_css = []
    total_size = 0
    module_count = 0

    print("üì¶ ƒêang g·ªôp c√°c module...\n")

    # ƒê·ªçc c√°c module theo th·ª© t·ª±
    for filename in sorted(CSS_MODULES.keys()):
        file_path = MODULES_DIR / filename

        if file_path.exists():
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                combined_css.append(content)
                size = len(content) / 1024
                total_size += size
                module_count += 1
            print(f"  ‚úì {filename:32s} | {size:7.1f} KB")
        else:
            print_warning(f"Kh√¥ng t√¨m th·∫•y: {filename}")

    # T·∫°o header cho file build
    build_header = f"""/*! 
 * ============================================================================
 * BRICON - Main CSS Build
 * ============================================================================
 * Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
 * Modules: {module_count} files
 * Description: Auto-generated minified CSS
 * DO NOT EDIT THIS FILE DIRECTLY - Edit individual modules instead
 * ============================================================================
 */

"""

    # G·ªôp v√† minify
    full_css = '\n\n'.join(combined_css)
    minified_css = minify_css(full_css)
    final_css = build_header + minified_css

    # Ghi file output
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write(final_css)

    # Th·ªëng k√™
    original_kb = total_size
    minified_kb = len(final_css) / 1024
    saved_kb = original_kb - minified_kb
    saved_percent = (saved_kb / original_kb) * 100 if original_kb > 0 else 0

    print(f"\n{'‚îÄ' * 70}")
    print(f"  üìä Th·ªëng k√™ Build:")
    print(f"     ‚Ä¢ K√≠ch th∆∞·ªõc g·ªëc:    {original_kb:8.1f} KB")
    print(f"     ‚Ä¢ K√≠ch th∆∞·ªõc minify: {minified_kb:8.1f} KB")
    print(f"     ‚Ä¢ Ti·∫øt ki·ªám:         {saved_kb:8.1f} KB ({saved_percent:.1f}%)")
    print(f"{'‚îÄ' * 70}")

    print_success(f"Build th√†nh c√¥ng: {OUTPUT_FILE}")
    return True


def watch_and_build():
    """Watch mode - t·ª± ƒë·ªông build khi c√≥ thay ƒë·ªïi"""
    try:
        from watchdog.observers import Observer
        from watchdog.events import FileSystemEventHandler
    except ImportError:
        print_error("C·∫ßn c√†i ƒë·∫∑t watchdog!")
        print_info("Ch·∫°y: pip install watchdog")
        return

    class CSSChangeHandler(FileSystemEventHandler):
        def on_modified(self, event):
            if event.src_path.endswith('.css') and 'main.min.css' not in event.src_path:
                print(f"\nüîÑ Ph√°t hi·ªán thay ƒë·ªïi: {Path(event.src_path).name}")
                build_css()

    print_header("üëÄ WATCH MODE - T·ª± ƒë·ªông build khi c√≥ thay ƒë·ªïi")
    print_info(f"ƒêang theo d√µi: {MODULES_DIR}")
    print_info("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng...\n")

    event_handler = CSSChangeHandler()
    observer = Observer()
    observer.schedule(event_handler, str(MODULES_DIR), recursive=False)
    observer.start()

    try:
        import time
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\n")
        print_info("ƒê√£ d·ª´ng watch mode")

    observer.join()


def show_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    print_header("üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG CSS BUILD SYSTEM")

    print("üîß C√°c l·ªánh c√≥ s·∫µn:\n")

    commands = [
        ("python build_css.py", "T√°ch + Build (m·∫∑c ƒë·ªãnh)", "L·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng"),
        ("python build_css.py split", "Ch·ªâ t√°ch file CSS", "T√°ch style.css th√†nh modules"),
        ("python build_css.py build", "Ch·ªâ build CSS", "G·ªôp modules th√†nh main.min.css"),
        ("python build_css.py watch", "Watch mode", "T·ª± ƒë·ªông build khi s·ª≠a file"),
        ("python build_css.py help", "Hi·ªÉn th·ªã tr·ª£ gi√∫p", "Xem h∆∞·ªõng d·∫´n n√†y"),
    ]

    for cmd, desc, note in commands:
        print(f"  {cmd:30s}")
        print(f"    ‚îî‚îÄ {desc}")
        print(f"       üí° {note}\n")

    print("üìÅ C·∫•u tr√∫c th∆∞ m·ª•c:\n")
    print("  app/")
    print("  ‚îî‚îÄ‚îÄ static/")
    print("      ‚îî‚îÄ‚îÄ css/")
    print("          ‚îú‚îÄ‚îÄ modules/           ‚Üê C√°c module CSS")
    print("          ‚îÇ   ‚îú‚îÄ‚îÄ 01-reset.css")
    print("          ‚îÇ   ‚îú‚îÄ‚îÄ 02-navbar.css")
    print("          ‚îÇ   ‚îî‚îÄ‚îÄ ...")
    print("          ‚îú‚îÄ‚îÄ style.css          ‚Üê File CSS g·ªëc")
    print("          ‚îî‚îÄ‚îÄ main.min.css       ‚Üê File build (d√πng trong production)\n")

    print("‚ö° Workflow khuy·∫øn ngh·ªã:\n")
    print("  1. L·∫ßn ƒë·∫ßu: python build_css.py")
    print("  2. Ph√°t tri·ªÉn: python build_css.py watch")
    print("  3. Production: Ch·ªâ c·∫ßn deploy main.min.css\n")

    print("üîó Update template:\n")
    print('  <link rel="stylesheet" href="{{ url_for(\'static\', filename=\'css/main.min.css\') }}">\n')


def main():
    """Main function"""
    import sys

    if len(sys.argv) > 1:
        command = sys.argv[1].lower()

        if command == 'split':
            split_css(INPUT_FILE)

        elif command == 'build':
            build_css()

        elif command == 'watch':
            watch_and_build()

        elif command in ['help', '-h', '--help']:
            show_help()

        else:
            print_error(f"L·ªánh kh√¥ng h·ª£p l·ªá: {command}")
            print_info("Ch·∫°y 'python build_css.py help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n")

    else:
        # M·∫∑c ƒë·ªãnh: split + build
        print_header("üöÄ CSS BUILD SYSTEM - BRICON")
        print_info("Ch·∫ø ƒë·ªô: T·ª± ƒë·ªông (Split + Build)\n")

        if split_css(INPUT_FILE):
            build_css()

            print("\n" + "=" * 70)
            print("  üéâ HO√ÄN T·∫§T!")
            print("=" * 70)
            print("\nüí° L·∫ßn sau ch·ªâ c·∫ßn ch·∫°y:")
            print("   ‚Ä¢ python build_css.py build  (Build l·∫°i)")
            print("   ‚Ä¢ python build_css.py watch  (Auto build)\n")


if __name__ == '__main__':
    main()